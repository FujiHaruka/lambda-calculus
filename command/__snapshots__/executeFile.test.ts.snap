export const snapshot = {};

snapshot[`executes simple.lambda 1`] = `
[
  "> \$id = x -> x",
  "(x -> x)",
  '> # Reduced to "f"',
  "> REDUCE \$id f",
  "((x -> x) f)
f",
  "> \$y  = x -> y",
  "(x -> y)",
  '> # Reduced to "y"',
  "> REDUCE \$y f",
  "((x -> y) f)
y",
]
`;

snapshot[`executes alpha_eq.lambda 1`] = `
[
  "> # Yes",
  "> ALPHA_EQ x -> x, t -> t",
  "Yes",
  "> # No",
  "> ALPHA_EQ x -> y, x -> t",
  "No",
  "> \$n = REDUCE \$PLUS \$1 \$1",
  "(((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s z)))) (s -> (z -> (s z))))
" +
    "((n -> (s -> (z -> (((s -> (z -> (s z))) s) ((n s) z))))) (s -> (z -> (s z))))
" +
    "(s -> (z -> (((s -> (z -> (s z))) s) (((s -> (z -> (s z))) s) z))))
" +
    "(s -> (z -> ((z -> (s z)) (((s -> (z -> (s z))) s) z))))
" +
    "(s -> (z -> (s (((s -> (z -> (s z))) s) z))))
" +
    "(s -> (z -> (s ((z -> (s z)) z))))
" +
    "(s -> (z -> (s (s z))))",
  "> # Yes",
  "> ALPHA_EQ \$n, \$2",
  "Yes",
]
`;

snapshot[`executes bool.lambda 1`] = `
[
  "> \$TRUE",
  "(t -> (f -> t))",
  "> \$FALSE",
  "(t -> (f -> f))",
  "> REDUCE \$NOT \$TRUE",
  "((p -> ((p (t -> (f -> f))) (t -> (f -> t)))) (t -> (f -> t)))
" +
    "(((t -> (f -> t)) (t -> (f -> f))) (t -> (f -> t)))
" +
    "((f -> (t -> (f -> f))) (t -> (f -> t)))
" +
    "(t -> (f -> f))",
  "> REDUCE \$NOT \$FALSE",
  "((p -> ((p (t -> (f -> f))) (t -> (f -> t)))) (t -> (f -> f)))
" +
    "(((t -> (f -> f)) (t -> (f -> f))) (t -> (f -> t)))
" +
    "((f -> f) (t -> (f -> t)))
" +
    "(t -> (f -> t))",
  "> REDUCE \$AND \$TRUE \$TRUE",
  "(((p -> (q -> ((p q) (t -> (f -> f))))) (t -> (f -> t))) (t -> (f -> t)))
" +
    "((q -> (((t -> (f -> t)) q) (t -> (f -> f)))) (t -> (f -> t)))
" +
    "(((t -> (f -> t)) (t -> (f -> t))) (t -> (f -> f)))
" +
    "((f -> (t -> (f -> t))) (t -> (f -> f)))
" +
    "(t -> (f -> t))",
  "> REDUCE \$AND \$TRUE \$FALSE",
  "(((p -> (q -> ((p q) (t -> (f -> f))))) (t -> (f -> t))) (t -> (f -> f)))
" +
    "((q -> (((t -> (f -> t)) q) (t -> (f -> f)))) (t -> (f -> f)))
" +
    "(((t -> (f -> t)) (t -> (f -> f))) (t -> (f -> f)))
" +
    "((f -> (t -> (f -> f))) (t -> (f -> f)))
" +
    "(t -> (f -> f))",
  "> REDUCE \$AND \$FALSE \$TRUE",
  "(((p -> (q -> ((p q) (t -> (f -> f))))) (t -> (f -> f))) (t -> (f -> t)))
" +
    "((q -> (((t -> (f -> f)) q) (t -> (f -> f)))) (t -> (f -> t)))
" +
    "(((t -> (f -> f)) (t -> (f -> t))) (t -> (f -> f)))
" +
    "((f -> f) (t -> (f -> f)))
" +
    "(t -> (f -> f))",
  "> REDUCE \$AND \$FALSE \$FALSE",
  "(((p -> (q -> ((p q) (t -> (f -> f))))) (t -> (f -> f))) (t -> (f -> f)))
" +
    "((q -> (((t -> (f -> f)) q) (t -> (f -> f)))) (t -> (f -> f)))
" +
    "(((t -> (f -> f)) (t -> (f -> f))) (t -> (f -> f)))
" +
    "((f -> f) (t -> (f -> f)))
" +
    "(t -> (f -> f))",
  "> REDUCE \$OR \$TRUE \$TRUE",
  "(((p -> (q -> ((p (t -> (f -> t))) q))) (t -> (f -> t))) (t -> (f -> t)))
" +
    "((q -> (((t -> (f -> t)) (t -> (f -> t))) q)) (t -> (f -> t)))
" +
    "(((t -> (f -> t)) (t -> (f -> t))) (t -> (f -> t)))
" +
    "((f -> (t -> (f -> t))) (t -> (f -> t)))
" +
    "(t -> (f -> t))",
  "> REDUCE \$OR \$TRUE \$FALSE",
  "(((p -> (q -> ((p (t -> (f -> t))) q))) (t -> (f -> t))) (t -> (f -> f)))
" +
    "((q -> (((t -> (f -> t)) (t -> (f -> t))) q)) (t -> (f -> f)))
" +
    "(((t -> (f -> t)) (t -> (f -> t))) (t -> (f -> f)))
" +
    "((f -> (t -> (f -> t))) (t -> (f -> f)))
" +
    "(t -> (f -> t))",
  "> REDUCE \$OR \$FALSE \$TRUE",
  "(((p -> (q -> ((p (t -> (f -> t))) q))) (t -> (f -> f))) (t -> (f -> t)))
" +
    "((q -> (((t -> (f -> f)) (t -> (f -> t))) q)) (t -> (f -> t)))
" +
    "(((t -> (f -> f)) (t -> (f -> t))) (t -> (f -> t)))
" +
    "((f -> f) (t -> (f -> t)))
" +
    "(t -> (f -> t))",
  "> REDUCE \$OR \$FALSE \$FALSE",
  "(((p -> (q -> ((p (t -> (f -> t))) q))) (t -> (f -> f))) (t -> (f -> f)))
" +
    "((q -> (((t -> (f -> f)) (t -> (f -> t))) q)) (t -> (f -> f)))
" +
    "(((t -> (f -> f)) (t -> (f -> t))) (t -> (f -> f)))
" +
    "((f -> f) (t -> (f -> f)))
" +
    "(t -> (f -> f))",
]
`;
