export const snapshot = {};

snapshot[`executes error.lambda 1`] = `
[
  "> # Error: Unexpected token",
  "> a -> -> b",
  "\\x1b[31mError\\x1b[39m: Unexpected token at position 5:

  a -> -> b
       ~~
",
]
`;

snapshot[`executes number.lambda 1`] = `
[
  "> \$x = REDUCE \$IS_ZERO \$0",
  "((n -> ((n (k -> (t -> (f -> f)))) (t -> (f -> t)))) (s -> (z -> z)))
" +
    "(((s -> (z -> z)) (k -> (t -> (f -> f)))) (t -> (f -> t)))
" +
    "((z -> z) (t -> (f -> t)))
" +
    "(t -> (f -> t))",
  "> ALPHA_EQ \$x, \$TRUE",
  "Yes",
  "> \$x = REDUCE \$IS_ZERO \$1",
  "((n -> ((n (k -> (t -> (f -> f)))) (t -> (f -> t)))) (s -> (z -> (s z))))
" +
    "(((s -> (z -> (s z))) (k -> (t -> (f -> f)))) (t -> (f -> t)))
" +
    "((z -> ((k -> (t -> (f -> f))) z)) (t -> (f -> t)))
" +
    "((k -> (t -> (f -> f))) (t -> (f -> t)))
" +
    "(t -> (f -> f))",
  "> ALPHA_EQ \$x, \$FALSE",
  "Yes",
  "> \$x = REDUCE \$SUCC \$0",
  "((n -> (s -> (z -> (s ((n s) z))))) (s -> (z -> z)))
" +
    "(s -> (z -> (s (((s -> (z -> z)) s) z))))
" +
    "(s -> (z -> (s ((z -> z) z))))
" +
    "(s -> (z -> (s z)))",
  "> ALPHA_EQ \$x, \$1",
  "Yes",
  "> \$x = REDUCE \$SUCC \$1",
  "((n -> (s -> (z -> (s ((n s) z))))) (s -> (z -> (s z))))
" +
    "(s -> (z -> (s (((s -> (z -> (s z))) s) z))))
" +
    "(s -> (z -> (s ((z -> (s z)) z))))
" +
    "(s -> (z -> (s (s z))))",
  "> ALPHA_EQ \$x, \$2",
  "Yes",
  "> \$x = REDUCE \$PLUS \$1 \$1",
  "(((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s z)))) (s -> (z -> (s z))))
" +
    "((n -> (s -> (z -> (((s -> (z -> (s z))) s) ((n s) z))))) (s -> (z -> (s z))))
" +
    "(s -> (z -> (((s -> (z -> (s z))) s) (((s -> (z -> (s z))) s) z))))
" +
    "(s -> (z -> ((z -> (s z)) (((s -> (z -> (s z))) s) z))))
" +
    "(s -> (z -> (s (((s -> (z -> (s z))) s) z))))
" +
    "(s -> (z -> (s ((z -> (s z)) z))))
" +
    "(s -> (z -> (s (s z))))",
  "> ALPHA_EQ \$x, \$2",
  "Yes",
  "> \$x = REDUCE \$PLUS \$2 \$3",
  "(((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (s -> (z -> (s (s (s z))))))
" +
    "((n -> (s -> (z -> (((s -> (z -> (s (s z)))) s) ((n s) z))))) (s -> (z -> (s (s (s z))))))
" +
    "(s -> (z -> (((s -> (z -> (s (s z)))) s) (((s -> (z -> (s (s (s z))))) s) z))))
" +
    "(s -> (z -> ((z -> (s (s z))) (((s -> (z -> (s (s (s z))))) s) z))))
" +
    "(s -> (z -> (s (s (((s -> (z -> (s (s (s z))))) s) z)))))
" +
    "(s -> (z -> (s (s ((z -> (s (s (s z)))) z)))))
" +
    "(s -> (z -> (s (s (s (s (s z)))))))",
  "> ALPHA_EQ \$x, \$5",
  "Yes",
  "> \$x = REDUCE \$PLUS \$2 \$3",
  "(((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (s -> (z -> (s (s (s z))))))
" +
    "((n -> (s -> (z -> (((s -> (z -> (s (s z)))) s) ((n s) z))))) (s -> (z -> (s (s (s z))))))
" +
    "(s -> (z -> (((s -> (z -> (s (s z)))) s) (((s -> (z -> (s (s (s z))))) s) z))))
" +
    "(s -> (z -> ((z -> (s (s z))) (((s -> (z -> (s (s (s z))))) s) z))))
" +
    "(s -> (z -> (s (s (((s -> (z -> (s (s (s z))))) s) z)))))
" +
    "(s -> (z -> (s (s ((z -> (s (s (s z)))) z)))))
" +
    "(s -> (z -> (s (s (s (s (s z)))))))",
  "> ALPHA_EQ \$x, \$5",
  "Yes",
  "> \$x = REDUCE \$MULT \$2 \$3",
  "(((m -> (n -> ((n ((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) m)) (s -> (z -> z))))) (s -> (z -> (s (s z))))) (s -> (z -> (s (s (s z))))))
" +
    "((n -> ((n ((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z)))))) (s -> (z -> z)))) (s -> (z -> (s (s (s z))))))
" +
    "(((s -> (z -> (s (s (s z))))) ((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z)))))) (s -> (z -> z)))
" +
    "((z -> (((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) z)))) (s -> (z -> z)))
" +
    "(((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (s -> (z -> z)))))
" +
    "((n -> (s -> (z -> (((s -> (z -> (s (s z)))) s) ((n s) z))))) (((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (s -> (z -> z)))))
" +
    "(s -> (z -> (((s -> (z -> (s (s z)))) s) (((((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (s -> (z -> z)))) s) z))))
" +
    "(s -> (z -> ((z -> (s (s z))) (((((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (s -> (z -> z)))) s) z))))
" +
    "(s -> (z -> (s (s (((((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (s -> (z -> z)))) s) z)))))
" +
    "(s -> (z -> (s (s ((((n -> (s -> (z -> (((s -> (z -> (s (s z)))) s) ((n s) z))))) (((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (s -> (z -> z)))) s) z)))))
" +
    "(s -> (z -> (s (s (((s -> (z -> (((s -> (z -> (s (s z)))) s) (((((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (s -> (z -> z))) s) z)))) s) z)))))
" +
    "(s -> (z -> (s (s ((z -> (((s -> (z -> (s (s z)))) s) (((((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (s -> (z -> z))) s) z))) z)))))
" +
    "(s -> (z -> (s (s (((s -> (z -> (s (s z)))) s) (((((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (s -> (z -> z))) s) z))))))
" +
    "(s -> (z -> (s (s ((z -> (s (s z))) (((((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (s -> (z -> z))) s) z))))))
" +
    "(s -> (z -> (s (s (s (s (((((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s (s z))))) (s -> (z -> z))) s) z)))))))
" +
    "(s -> (z -> (s (s (s (s ((((n -> (s -> (z -> (((s -> (z -> (s (s z)))) s) ((n s) z))))) (s -> (z -> z))) s) z)))))))
" +
    "(s -> (z -> (s (s (s (s (((s -> (z -> (((s -> (z -> (s (s z)))) s) (((s -> (z -> z)) s) z)))) s) z)))))))
" +
    "(s -> (z -> (s (s (s (s ((z -> (((s -> (z -> (s (s z)))) s) (((s -> (z -> z)) s) z))) z)))))))
" +
    "(s -> (z -> (s (s (s (s (((s -> (z -> (s (s z)))) s) (((s -> (z -> z)) s) z))))))))
" +
    "(s -> (z -> (s (s (s (s ((z -> (s (s z))) (((s -> (z -> z)) s) z))))))))
" +
    "(s -> (z -> (s (s (s (s (s (s (((s -> (z -> z)) s) z)))))))))
" +
    "(s -> (z -> (s (s (s (s (s (s ((z -> z) z)))))))))
" +
    "(s -> (z -> (s (s (s (s (s (s z))))))))",
  "> ALPHA_EQ \$x, \$6",
  "Yes",
  "> \$x = REDUCE \$PRED \$1",
  "((n -> (f -> (x -> (((n (g -> (h -> (h (g f))))) (u -> x)) (u -> u))))) (s -> (z -> (s z))))
" +
    "(f -> (x -> ((((s -> (z -> (s z))) (g -> (h -> (h (g f))))) (u -> x)) (u -> u))))
" +
    "(f -> (x -> (((z -> ((g -> (h -> (h (g f)))) z)) (u -> x)) (u -> u))))
" +
    "(f -> (x -> (((g -> (h -> (h (g f)))) (u -> x)) (u -> u))))
" +
    "(f -> (x -> ((h -> (h ((u -> x) f))) (u -> u))))
" +
    "(f -> (x -> ((u -> u) ((u -> x) f))))
" +
    "(f -> (x -> ((u -> x) f)))
" +
    "(f -> (x -> x))",
  "> ALPHA_EQ \$x, \$0",
  "Yes",
  "> \$x = REDUCE \$SUB \$5 \$2",
  "(((m -> (n -> ((n (n -> (f -> (x -> (((n (g -> (h -> (h (g f))))) (u -> x)) (u -> u)))))) m))) (s -> (z -> (s (s (s (s (s z)))))))) (s -> (z -> (s (s z)))))
" +
    "((n -> ((n (n -> (f -> (x -> (((n (g -> (h -> (h (g f))))) (u -> x)) (u -> u)))))) (s -> (z -> (s (s (s (s (s z))))))))) (s -> (z -> (s (s z)))))
" +
    "(((s -> (z -> (s (s z)))) (n -> (f -> (x -> (((n (g -> (h -> (h (g f))))) (u -> x)) (u -> u)))))) (s -> (z -> (s (s (s (s (s z))))))))
" +
    "((z -> ((n -> (f -> (x -> (((n (g -> (h -> (h (g f))))) (u -> x)) (u -> u))))) ((n -> (f -> (x -> (((n (g -> (h -> (h (g f))))) (u -> x)) (u -> u))))) z))) (s -> (z -> (s (s (s (s (s z))))))))
" +
    "((n -> (f -> (x -> (((n (g -> (h -> (h (g f))))) (u -> x)) (u -> u))))) ((n -> (f -> (x -> (((n (g -> (h -> (h (g f))))) (u -> x)) (u -> u))))) (s -> (z -> (s (s (s (s (s z)))))))))
" +
    "(f -> (x -> (((((n -> (f -> (x -> (((n (g -> (h -> (h (g f))))) (u -> x)) (u -> u))))) (s -> (z -> (s (s (s (s (s z)))))))) (g -> (h -> (h (g f))))) (u -> x)) (u -> u))))
" +
    "(f -> (x -> ((((f -> (x -> ((((s -> (z -> (s (s (s (s (s z))))))) (g -> (h -> (h (g f))))) (u -> x)) (u -> u)))) (g -> (h -> (h (g f))))) (u -> x)) (u -> u))))
" +
    "(f -> (x -> (((x -> ((((s -> (z -> (s (s (s (s (s z))))))) (g -> (h -> (h (g (g -> (h -> (h (g f))))))))) (u -> x)) (u -> u))) (u -> x)) (u -> u))))
" +
    "(f -> (x -> (((((s -> (z -> (s (s (s (s (s z))))))) (g -> (h -> (h (g (g -> (h -> (h (g f))))))))) (u -> (u -> x))) (u -> u)) (u -> u))))
" +
    "(f -> (x -> ((((z -> ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) z)))))) (u -> (u -> x))) (u -> u)) (u -> u))))
" +
    "(f -> (x -> ((((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x))))))) (u -> u)) (u -> u))))
" +
    "(f -> (x -> (((h -> (h (((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x)))))) (g -> (h -> (h (g f))))))) (u -> u)) (u -> u))))
" +
    "(f -> (x -> (((u -> u) (((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x)))))) (g -> (h -> (h (g f)))))) (u -> u))))
" +
    "(f -> (x -> ((((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x)))))) (g -> (h -> (h (g f))))) (u -> u))))
" +
    "(f -> (x -> (((h -> (h (((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x))))) (g -> (h -> (h (g f))))))) (g -> (h -> (h (g f))))) (u -> u))))
" +
    "(f -> (x -> (((g -> (h -> (h (g f)))) (((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x))))) (g -> (h -> (h (g f)))))) (u -> u))))
" +
    "(f -> (x -> ((h -> (h ((((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x))))) (g -> (h -> (h (g f))))) f))) (u -> u))))
" +
    "(f -> (x -> ((u -> u) ((((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x))))) (g -> (h -> (h (g f))))) f))))
" +
    "(f -> (x -> ((((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x))))) (g -> (h -> (h (g f))))) f)))
" +
    "(f -> (x -> (((h -> (h (((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x)))) (g -> (h -> (h (g f))))))) (g -> (h -> (h (g f))))) f)))
" +
    "(f -> (x -> (((g -> (h -> (h (g f)))) (((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x)))) (g -> (h -> (h (g f)))))) f)))
" +
    "(f -> (x -> ((h -> (h ((((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x)))) (g -> (h -> (h (g f))))) f))) f)))
" +
    "(f -> (x -> (f ((((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) ((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x)))) (g -> (h -> (h (g f))))) f))))
" +
    "(f -> (x -> (f (((h -> (h (((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x))) (g -> (h -> (h (g f))))))) (g -> (h -> (h (g f))))) f))))
" +
    "(f -> (x -> (f (((g -> (h -> (h (g f)))) (((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x))) (g -> (h -> (h (g f)))))) f))))
" +
    "(f -> (x -> (f ((h -> (h ((((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x))) (g -> (h -> (h (g f))))) f))) f))))
" +
    "(f -> (x -> (f (f ((((g -> (h -> (h (g (g -> (h -> (h (g f)))))))) (u -> (u -> x))) (g -> (h -> (h (g f))))) f)))))
" +
    "(f -> (x -> (f (f (((h -> (h ((u -> (u -> x)) (g -> (h -> (h (g f))))))) (g -> (h -> (h (g f))))) f)))))
" +
    "(f -> (x -> (f (f (((g -> (h -> (h (g f)))) ((u -> (u -> x)) (g -> (h -> (h (g f)))))) f)))))
" +
    "(f -> (x -> (f (f ((h -> (h (((u -> (u -> x)) (g -> (h -> (h (g f))))) f))) f)))))
" +
    "(f -> (x -> (f (f (f (((u -> (u -> x)) (g -> (h -> (h (g f))))) f))))))
" +
    "(f -> (x -> (f (f (f ((u -> x) f))))))
" +
    "(f -> (x -> (f (f (f x)))))",
  "> ALPHA_EQ \$x, \$3",
  "Yes",
]
`;

snapshot[`executes simple.lambda 1`] = `
[
  "> \$id = x -> x",
  "(x -> x)",
  '> # Reduced to "f"',
  "> REDUCE \$id f",
  "((x -> x) f)
f",
  "> \$y  = x -> y",
  "(x -> y)",
  '> # Reduced to "y"',
  "> REDUCE \$y f",
  "((x -> y) f)
y",
  "> # Show all available built-in aliases",
  "> LIST",
  "Builtin aliases
" +
    "===============
" +
    "\\x1b[1m\$TRUE\\x1b[22m = t -> (f -> t)
" +
    "
" +
    "\\x1b[1m\$FALSE\\x1b[22m = t -> (f -> f)
" +
    "
" +
    "\\x1b[1m\$AND\\x1b[22m = p -> (q -> (p q \$FALSE))
" +
    "usage  : \$AND <boolean> <boolean>
" +
    "example: REDUCE \$AND \$TRUE \$FALSE
" +
    "
" +
    "\\x1b[1m\$OR\\x1b[22m = p -> (q -> (p \$TRUE q))
" +
    "usage  : \$OR <boolean> <boolean>
" +
    "example: REDUCE \$OR \$TRUE \$FALSE
" +
    "
" +
    "\\x1b[1m\$NOT\\x1b[22m = p -> (p \$FALSE \$TRUE)
" +
    "usage  : \$NOT <boolean>
" +
    "example: REDUCE \$NOT \$TRUE
" +
    "
" +
    "\\x1b[1m\$IF\\x1b[22m = p -> (a -> (b -> (p a b)))
" +
    "usage  : \$IF <boolean> <expression> <expression>
" +
    "example: REDUCE \$IF \$TRUE x y
" +
    "
" +
    "\\x1b[1m\$0\\x1b[22m = s -> (z -> z)
" +
    "
" +
    "\\x1b[1m\$1\\x1b[22m = s -> (z -> (s z))
" +
    "
" +
    "\\x1b[1m\$2\\x1b[22m = s -> (z -> (s (s z)))
" +
    "
" +
    "\\x1b[1m\$3\\x1b[22m = s -> (z -> (s (s (s z))))
" +
    "
" +
    "\\x1b[1m\$4\\x1b[22m = s -> (z -> (s (s (s (s z)))))
" +
    "
" +
    "\\x1b[1m\$5\\x1b[22m = s -> (z -> (s (s (s (s (s z))))))
" +
    "
" +
    "\\x1b[1m\$6\\x1b[22m = s -> (z -> (s (s (s (s (s (s z)))))))
" +
    "
" +
    "\\x1b[1m\$7\\x1b[22m = s -> (z -> (s (s (s (s (s (s (s z))))))))
" +
    "
" +
    "\\x1b[1m\$8\\x1b[22m = s -> (z -> (s (s (s (s (s (s (s (s z)))))))))
" +
    "
" +
    "\\x1b[1m\$9\\x1b[22m = s -> (z -> (s (s (s (s (s (s (s (s (s z))))))))))
" +
    "
" +
    "\\x1b[1m\$IS_ZERO\\x1b[22m = n -> (n (k -> \$FALSE) \$TRUE)
" +
    "usage  : \$IS_ZERO <number>
" +
    "example: REDUCE \$IS_ZERO \$0
" +
    "
" +
    "\\x1b[1m\$SUCC\\x1b[22m = n -> (s -> (z -> (s (n s z))))
" +
    "usage  : \$SUCC <number>
" +
    "example: REDUCE \$SUCC \$0
" +
    "
" +
    "\\x1b[1m\$PLUS\\x1b[22m = m -> (n -> (s -> (z -> (m s (n s z)))))
" +
    "usage  : \$PLUS <number> <number>
" +
    "example: REDUCE \$PLUS \$1 \$2
" +
    "
" +
    "\\x1b[1m\$MULT\\x1b[22m = m -> (n -> (n (\$PLUS m) \$0))
" +
    "usage  : \$MULT <number> <number>
" +
    "example: REDUCE \$MULT \$2 \$3
" +
    "
" +
    "\\x1b[1m\$PRED\\x1b[22m = n -> f -> x -> (n (g -> (h -> (h (g f)))) (u -> x) (u -> u))
" +
    "usage  : \$PRED <number>
" +
    "example: REDUCE \$PRED \$2
" +
    "
" +
    "\\x1b[1m\$SUB\\x1b[22m = m -> (n -> ((n \$PRED) m))
" +
    "usage  : \$SUB <number> <number>
" +
    "example: REDUCE \$SUB \$3 \$2
",
]
`;

snapshot[`executes alpha_eq.lambda 1`] = `
[
  "> # Yes",
  "> ALPHA_EQ x -> x, t -> t",
  "Yes",
  "> # No",
  "> ALPHA_EQ x -> y, x -> t",
  "No",
  "> \$n = REDUCE \$PLUS \$1 \$1",
  "(((m -> (n -> (s -> (z -> ((m s) ((n s) z)))))) (s -> (z -> (s z)))) (s -> (z -> (s z))))
" +
    "((n -> (s -> (z -> (((s -> (z -> (s z))) s) ((n s) z))))) (s -> (z -> (s z))))
" +
    "(s -> (z -> (((s -> (z -> (s z))) s) (((s -> (z -> (s z))) s) z))))
" +
    "(s -> (z -> ((z -> (s z)) (((s -> (z -> (s z))) s) z))))
" +
    "(s -> (z -> (s (((s -> (z -> (s z))) s) z))))
" +
    "(s -> (z -> (s ((z -> (s z)) z))))
" +
    "(s -> (z -> (s (s z))))",
  "> # Yes",
  "> ALPHA_EQ \$n, \$2",
  "Yes",
]
`;

snapshot[`executes bool.lambda 1`] = `
[
  "> \$TRUE",
  "(t -> (f -> t))",
  "> \$FALSE",
  "(t -> (f -> f))",
  "> REDUCE \$NOT \$TRUE",
  "((p -> ((p (t -> (f -> f))) (t -> (f -> t)))) (t -> (f -> t)))
" +
    "(((t -> (f -> t)) (t -> (f -> f))) (t -> (f -> t)))
" +
    "((f -> (t -> (f -> f))) (t -> (f -> t)))
" +
    "(t -> (f -> f))",
  "> REDUCE \$NOT \$FALSE",
  "((p -> ((p (t -> (f -> f))) (t -> (f -> t)))) (t -> (f -> f)))
" +
    "(((t -> (f -> f)) (t -> (f -> f))) (t -> (f -> t)))
" +
    "((f -> f) (t -> (f -> t)))
" +
    "(t -> (f -> t))",
  "> REDUCE \$AND \$TRUE \$TRUE",
  "(((p -> (q -> ((p q) (t -> (f -> f))))) (t -> (f -> t))) (t -> (f -> t)))
" +
    "((q -> (((t -> (f -> t)) q) (t -> (f -> f)))) (t -> (f -> t)))
" +
    "(((t -> (f -> t)) (t -> (f -> t))) (t -> (f -> f)))
" +
    "((f -> (t -> (f -> t))) (t -> (f -> f)))
" +
    "(t -> (f -> t))",
  "> REDUCE \$AND \$TRUE \$FALSE",
  "(((p -> (q -> ((p q) (t -> (f -> f))))) (t -> (f -> t))) (t -> (f -> f)))
" +
    "((q -> (((t -> (f -> t)) q) (t -> (f -> f)))) (t -> (f -> f)))
" +
    "(((t -> (f -> t)) (t -> (f -> f))) (t -> (f -> f)))
" +
    "((f -> (t -> (f -> f))) (t -> (f -> f)))
" +
    "(t -> (f -> f))",
  "> REDUCE \$AND \$FALSE \$TRUE",
  "(((p -> (q -> ((p q) (t -> (f -> f))))) (t -> (f -> f))) (t -> (f -> t)))
" +
    "((q -> (((t -> (f -> f)) q) (t -> (f -> f)))) (t -> (f -> t)))
" +
    "(((t -> (f -> f)) (t -> (f -> t))) (t -> (f -> f)))
" +
    "((f -> f) (t -> (f -> f)))
" +
    "(t -> (f -> f))",
  "> REDUCE \$AND \$FALSE \$FALSE",
  "(((p -> (q -> ((p q) (t -> (f -> f))))) (t -> (f -> f))) (t -> (f -> f)))
" +
    "((q -> (((t -> (f -> f)) q) (t -> (f -> f)))) (t -> (f -> f)))
" +
    "(((t -> (f -> f)) (t -> (f -> f))) (t -> (f -> f)))
" +
    "((f -> f) (t -> (f -> f)))
" +
    "(t -> (f -> f))",
  "> REDUCE \$OR \$TRUE \$TRUE",
  "(((p -> (q -> ((p (t -> (f -> t))) q))) (t -> (f -> t))) (t -> (f -> t)))
" +
    "((q -> (((t -> (f -> t)) (t -> (f -> t))) q)) (t -> (f -> t)))
" +
    "(((t -> (f -> t)) (t -> (f -> t))) (t -> (f -> t)))
" +
    "((f -> (t -> (f -> t))) (t -> (f -> t)))
" +
    "(t -> (f -> t))",
  "> REDUCE \$OR \$TRUE \$FALSE",
  "(((p -> (q -> ((p (t -> (f -> t))) q))) (t -> (f -> t))) (t -> (f -> f)))
" +
    "((q -> (((t -> (f -> t)) (t -> (f -> t))) q)) (t -> (f -> f)))
" +
    "(((t -> (f -> t)) (t -> (f -> t))) (t -> (f -> f)))
" +
    "((f -> (t -> (f -> t))) (t -> (f -> f)))
" +
    "(t -> (f -> t))",
  "> REDUCE \$OR \$FALSE \$TRUE",
  "(((p -> (q -> ((p (t -> (f -> t))) q))) (t -> (f -> f))) (t -> (f -> t)))
" +
    "((q -> (((t -> (f -> f)) (t -> (f -> t))) q)) (t -> (f -> t)))
" +
    "(((t -> (f -> f)) (t -> (f -> t))) (t -> (f -> t)))
" +
    "((f -> f) (t -> (f -> t)))
" +
    "(t -> (f -> t))",
  "> REDUCE \$OR \$FALSE \$FALSE",
  "(((p -> (q -> ((p (t -> (f -> t))) q))) (t -> (f -> f))) (t -> (f -> f)))
" +
    "((q -> (((t -> (f -> f)) (t -> (f -> t))) q)) (t -> (f -> f)))
" +
    "(((t -> (f -> f)) (t -> (f -> t))) (t -> (f -> f)))
" +
    "((f -> f) (t -> (f -> f)))
" +
    "(t -> (f -> f))",
]
`;
